"""
This type stub file was generated by pyright.
"""

from unittest import mock
from fire import testutils

"""Tests for the core module."""
class CoreTest(testutils.BaseTestCase):
  def testOneLineResult(self): # -> None:
    ...
  
  def testOneLineResultCircularRef(self): # -> None:
    ...
  
  @mock.patch('fire.interact.Embed')
  def testInteractiveMode(self, mock_embed): # -> None:
    ...
  
  @mock.patch('fire.interact.Embed')
  def testInteractiveModeFullArgument(self, mock_embed): # -> None:
    ...
  
  @mock.patch('fire.interact.Embed')
  def testInteractiveModeVariables(self, mock_embed): # -> None:
    ...
  
  @mock.patch('fire.interact.Embed')
  def testInteractiveModeVariablesWithName(self, mock_embed): # -> None:
    ...
  
  def testHelpWithClass(self): # -> None:
    ...
  
  def testHelpWithMember(self): # -> None:
    ...
  
  def testHelpOnErrorInConstructor(self): # -> None:
    ...
  
  def testHelpWithNamespaceCollision(self): # -> None:
    ...
  
  def testInvalidParameterRaisesFireExit(self): # -> None:
    ...
  
  def testErrorRaising(self): # -> None:
    ...
  
  def testFireError(self): # -> None:
    ...
  
  def testFireErrorMultipleValues(self): # -> None:
    ...
  
  def testPrintEmptyDict(self): # -> None:
    ...
  
  def testPrintOrderedDict(self): # -> None:
    ...
  
  def testPrintNamedTupleField(self): # -> None:
    ...
  
  def testPrintNamedTupleFieldNameEqualsValue(self): # -> None:
    ...
  
  def testPrintNamedTupleIndex(self): # -> None:
    ...
  
  def testPrintSet(self): # -> None:
    ...
  
  def testPrintFrozenSet(self): # -> None:
    ...
  
  def testPrintNamedTupleNegativeIndex(self): # -> None:
    ...
  
  def testCallable(self): # -> None:
    ...
  
  def testCallableWithPositionalArgs(self): # -> None:
    ...
  
  def testStaticMethod(self): # -> None:
    ...
  
  def testClassMethod(self): # -> None:
    ...
  
  def testCustomSerialize(self): # -> None:
    ...
  
  def testLruCacheDecoratorBoundArg(self): # -> None:
    ...
  
  def testLruCacheDecorator(self): # -> None:
    ...
  


if __name__ == '__main__':
  ...
