"""
This type stub file was generated by pyright.
"""

from fire import decorators, testutils

"""Tests for the decorators module."""
class NoDefaults:
  """A class for testing decorated functions without default values."""
  @decorators.SetParseFns(count=int)
  def double(self, count):
    ...
  
  @decorators.SetParseFns(count=float)
  def triple(self, count):
    ...
  
  @decorators.SetParseFns(int)
  def quadruple(self, count):
    ...
  


@decorators.SetParseFns(int)
def double(count):
  ...

class WithDefaults:
  @decorators.SetParseFns(float)
  def example1(self, arg1=...): # -> tuple[int, type[int]]:
    ...
  
  @decorators.SetParseFns(arg1=float)
  def example2(self, arg1=...): # -> tuple[int, type[int]]:
    ...
  


class MixedArguments:
  @decorators.SetParseFns(float, arg2=str)
  def example3(self, arg1, arg2): # -> tuple[Any, Any]:
    ...
  


class PartialParseFn:
  @decorators.SetParseFns(arg1=str)
  def example4(self, arg1, arg2): # -> tuple[Any, Any]:
    ...
  
  @decorators.SetParseFns(arg2=str)
  def example5(self, arg1, arg2): # -> tuple[Any, Any]:
    ...
  


class WithKwargs:
  @decorators.SetParseFns(mode=str, count=int)
  def example6(self, **kwargs): # -> tuple[Any, Any]:
    ...
  


class WithVarArgs:
  @decorators.SetParseFn(str)
  def example7(self, arg1, arg2=..., *varargs, **kwargs): # -> tuple[Any, Any | None, tuple[Any, ...], dict[str, Any]]:
    ...
  


class FireDecoratorsTest(testutils.BaseTestCase):
  def testSetParseFnsNamedArgs(self): # -> None:
    ...
  
  def testSetParseFnsPositionalArgs(self): # -> None:
    ...
  
  def testSetParseFnsFnWithPositionalArgs(self): # -> None:
    ...
  
  def testSetParseFnsDefaultsFromPython(self): # -> None:
    ...
  
  def testSetParseFnsDefaultsFromFire(self): # -> None:
    ...
  
  def testSetParseFnsNamedDefaultsFromPython(self): # -> None:
    ...
  
  def testSetParseFnsNamedDefaultsFromFire(self): # -> None:
    ...
  
  def testSetParseFnsPositionalAndNamed(self): # -> None:
    ...
  
  def testSetParseFnsOnlySomeTypes(self): # -> None:
    ...
  
  def testSetParseFnsForKeywordArgs(self): # -> None:
    ...
  
  def testSetParseFn(self): # -> None:
    ...
  


if __name__ == '__main__':
  ...
