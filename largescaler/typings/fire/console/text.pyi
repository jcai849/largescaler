"""
This type stub file was generated by pyright.
"""

import enum

"""Semantic text objects that are used for styled outputting."""
class TextAttributes:
  """Attributes to use to style text with."""
  def __init__(self, format_str=..., color=..., attrs=...) -> None:
    """Defines a set of attributes for a piece of text.

    Args:
      format_str: (str), string that will be used to format the text
        with. For example '[{}]', to enclose text in brackets.
      color: (Colors), the color the text should be formatted with.
      attrs: (Attrs), the attributes to apply to text.
    """
    ...
  
  @property
  def format_str(self): # -> None:
    ...
  
  @property
  def color(self): # -> None:
    ...
  
  @property
  def attrs(self): # -> list[Any]:
    ...
  


class TypedText:
  """Text with a semantic type that will be used for styling."""
  def __init__(self, texts, text_type=...) -> None:
    """String of text and a corresponding type to use to style that text.

    Args:
     texts: (list[str]), list of strs or TypedText objects
       that should be styled using text_type.
     text_type: (TextTypes), the semantic type of the text that
       will be used to style text.
    """
    ...
  
  def __len__(self): # -> int:
    ...
  
  def __add__(self, other): # -> TypedText:
    ...
  
  def __radd__(self, other): # -> TypedText:
    ...
  


class _TextTypes(enum.Enum):
  """Text types base class that defines base functionality."""
  def __call__(self, *args): # -> TypedText:
    """Returns a TypedText object using this style."""
    ...
  


class TextTypes(_TextTypes):
  """Defines text types that can be used for styling text."""
  RESOURCE_NAME = ...
  URL = ...
  USER_INPUT = ...
  COMMAND = ...
  INFO = ...
  URI = ...
  OUTPUT = ...
  PT_SUCCESS = ...
  PT_FAILURE = ...


