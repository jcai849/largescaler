"""
This type stub file was generated by pyright.
"""

from fire import testutils

"""Tests for the fire module."""
class FireTest(testutils.BaseTestCase):
  def testFire(self): # -> None:
    ...
  
  def testFirePositionalCommand(self): # -> None:
    ...
  
  def testFireInvalidCommandArg(self): # -> None:
    ...
  
  def testFireDefaultName(self): # -> None:
    ...
  
  def testFireNoArgs(self): # -> None:
    ...
  
  def testFireExceptions(self): # -> None:
    ...
  
  def testFireNamedArgs(self): # -> None:
    ...
  
  def testFireNamedArgsSingleHyphen(self): # -> None:
    ...
  
  def testFireNamedArgsWithEquals(self): # -> None:
    ...
  
  def testFireNamedArgsWithEqualsSingleHyphen(self): # -> None:
    ...
  
  def testFireAllNamedArgs(self): # -> None:
    ...
  
  def testFireAllNamedArgsOneMissing(self): # -> None:
    ...
  
  def testFirePartialNamedArgs(self): # -> None:
    ...
  
  def testFirePartialNamedArgsOneMissing(self): # -> None:
    ...
  
  def testFireAnnotatedArgs(self): # -> None:
    ...
  
  def testFireKeywordOnlyArgs(self): # -> None:
    ...
  
  def testFireProperties(self): # -> None:
    ...
  
  def testFireRecursion(self): # -> None:
    ...
  
  def testFireVarArgs(self): # -> None:
    ...
  
  def testFireVarArgsWithNamedArgs(self): # -> None:
    ...
  
  def testFireKeywordArgs(self): # -> None:
    ...
  
  def testFireKeywordArgsWithMissingPositionalArgs(self): # -> None:
    ...
  
  def testFireObject(self): # -> None:
    ...
  
  def testFireDict(self): # -> None:
    ...
  
  def testFireObjectWithDict(self): # -> None:
    ...
  
  def testFireSet(self): # -> None:
    ...
  
  def testFireFrozenset(self): # -> None:
    ...
  
  def testFireList(self): # -> None:
    ...
  
  def testFireObjectWithList(self): # -> None:
    ...
  
  def testFireObjectWithTuple(self): # -> None:
    ...
  
  def testFireObjectWithListAsObject(self): # -> None:
    ...
  
  def testFireObjectWithTupleAsObject(self): # -> None:
    ...
  
  def testFireNoComponent(self): # -> None:
    ...
  
  def testFireUnderscores(self): # -> None:
    ...
  
  def testFireUnderscoresInArg(self): # -> None:
    ...
  
  def testBoolParsing(self): # -> None:
    ...
  
  def testBoolParsingContinued(self): # -> None:
    ...
  
  def testBoolParsingSingleHyphen(self): # -> None:
    ...
  
  def testBoolParsingLessExpectedCases(self): # -> None:
    ...
  
  def testSingleCharFlagParsing(self): # -> None:
    ...
  
  def testSingleCharFlagParsingEqualSign(self): # -> None:
    ...
  
  def testSingleCharFlagParsingExactMatch(self): # -> None:
    ...
  
  def testSingleCharFlagParsingCapitalLetter(self): # -> None:
    ...
  
  def testBoolParsingWithNo(self): # -> None:
    ...
  
  def testTraceFlag(self): # -> None:
    ...
  
  def testHelpFlag(self): # -> None:
    ...
  
  def testHelpFlagAndTraceFlag(self): # -> None:
    ...
  
  def testTabCompletionNoName(self): # -> None:
    ...
  
  def testTabCompletion(self): # -> None:
    ...
  
  def testTabCompletionWithDict(self): # -> None:
    ...
  
  def testBasicSeparator(self): # -> None:
    ...
  
  def testNonComparable(self): # -> None:
    """Fire should work with classes that disallow comparisons."""
    ...
  
  def testExtraSeparators(self): # -> None:
    ...
  
  def testSeparatorForChaining(self): # -> None:
    ...
  
  def testNegativeNumbers(self): # -> None:
    ...
  
  def testFloatForExpectedInt(self): # -> None:
    ...
  
  def testClassInstantiation(self): # -> None:
    ...
  
  def testTraceErrors(self): # -> None:
    ...
  
  def testClassWithDefaultMethod(self): # -> None:
    ...
  
  def testClassWithInvalidProperty(self): # -> None:
    ...
  
  def testHelpKwargsDecorator(self): # -> None:
    ...
  
  def testFireAsyncio(self): # -> None:
    ...
  


if __name__ == '__main__':
  ...
